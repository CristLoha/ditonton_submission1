// Mocks generated by Mockito 5.4.6 from annotations
// in home/test/presentation/pages/home_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:core/core.dart' as _i7;
import 'package:dartz/dartz.dart' as _i3;
import 'package:home/domain/entities/movie.dart' as _i8;
import 'package:home/domain/entities/tv.dart' as _i12;
import 'package:home/domain/repository/movie_repository.dart' as _i2;
import 'package:home/domain/repository/tv_repository.dart' as _i4;
import 'package:home/domain/usecases/get_now_playing_movies.dart' as _i5;
import 'package:home/domain/usecases/get_on_the_air_tv.dart' as _i11;
import 'package:home/domain/usecases/get_popular_movies.dart' as _i9;
import 'package:home/domain/usecases/get_popular_tv.dart' as _i13;
import 'package:home/domain/usecases/get_top_rated_movies.dart' as _i10;
import 'package:home/domain/usecases/get_top_rated_tv.dart' as _i14;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMovieRepository_0 extends _i1.SmartFake
    implements _i2.MovieRepository {
  _FakeMovieRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTvRepository_2 extends _i1.SmartFake implements _i4.TvRepository {
  _FakeTvRepository_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GetNowPlayingMovies].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetNowPlayingMovies extends _i1.Mock
    implements _i5.GetNowPlayingMovies {
  MockGetNowPlayingMovies() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MovieRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeMovieRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.MovieRepository);

  @override
  _i6.Future<_i3.Either<_i7.Failure, List<_i8.Movie>>> execute() =>
      (super.noSuchMethod(
            Invocation.method(#execute, []),
            returnValue:
                _i6.Future<_i3.Either<_i7.Failure, List<_i8.Movie>>>.value(
                  _FakeEither_1<_i7.Failure, List<_i8.Movie>>(
                    this,
                    Invocation.method(#execute, []),
                  ),
                ),
          )
          as _i6.Future<_i3.Either<_i7.Failure, List<_i8.Movie>>>);
}

/// A class which mocks [GetPopularMovies].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetPopularMovies extends _i1.Mock implements _i9.GetPopularMovies {
  MockGetPopularMovies() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MovieRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeMovieRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.MovieRepository);

  @override
  _i6.Future<_i3.Either<_i7.Failure, List<_i8.Movie>>> execute() =>
      (super.noSuchMethod(
            Invocation.method(#execute, []),
            returnValue:
                _i6.Future<_i3.Either<_i7.Failure, List<_i8.Movie>>>.value(
                  _FakeEither_1<_i7.Failure, List<_i8.Movie>>(
                    this,
                    Invocation.method(#execute, []),
                  ),
                ),
          )
          as _i6.Future<_i3.Either<_i7.Failure, List<_i8.Movie>>>);
}

/// A class which mocks [GetTopRatedMovies].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTopRatedMovies extends _i1.Mock implements _i10.GetTopRatedMovies {
  MockGetTopRatedMovies() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MovieRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeMovieRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.MovieRepository);

  @override
  _i6.Future<_i3.Either<_i7.Failure, List<_i8.Movie>>> execute() =>
      (super.noSuchMethod(
            Invocation.method(#execute, []),
            returnValue:
                _i6.Future<_i3.Either<_i7.Failure, List<_i8.Movie>>>.value(
                  _FakeEither_1<_i7.Failure, List<_i8.Movie>>(
                    this,
                    Invocation.method(#execute, []),
                  ),
                ),
          )
          as _i6.Future<_i3.Either<_i7.Failure, List<_i8.Movie>>>);
}

/// A class which mocks [GetOnTheAirTv].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetOnTheAirTv extends _i1.Mock implements _i11.GetOnTheAirTv {
  MockGetOnTheAirTv() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.TvRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeTvRepository_2(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i4.TvRepository);

  @override
  _i6.Future<_i3.Either<_i7.Failure, List<_i12.Tv>>> execute() =>
      (super.noSuchMethod(
            Invocation.method(#execute, []),
            returnValue:
                _i6.Future<_i3.Either<_i7.Failure, List<_i12.Tv>>>.value(
                  _FakeEither_1<_i7.Failure, List<_i12.Tv>>(
                    this,
                    Invocation.method(#execute, []),
                  ),
                ),
          )
          as _i6.Future<_i3.Either<_i7.Failure, List<_i12.Tv>>>);
}

/// A class which mocks [GetPopularTv].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetPopularTv extends _i1.Mock implements _i13.GetPopularTv {
  MockGetPopularTv() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.TvRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeTvRepository_2(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i4.TvRepository);

  @override
  _i6.Future<_i3.Either<_i7.Failure, List<_i12.Tv>>> execute() =>
      (super.noSuchMethod(
            Invocation.method(#execute, []),
            returnValue:
                _i6.Future<_i3.Either<_i7.Failure, List<_i12.Tv>>>.value(
                  _FakeEither_1<_i7.Failure, List<_i12.Tv>>(
                    this,
                    Invocation.method(#execute, []),
                  ),
                ),
          )
          as _i6.Future<_i3.Either<_i7.Failure, List<_i12.Tv>>>);
}

/// A class which mocks [GetTopRatedTv].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTopRatedTv extends _i1.Mock implements _i14.GetTopRatedTv {
  MockGetTopRatedTv() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.TvRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeTvRepository_2(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i4.TvRepository);

  @override
  _i6.Future<_i3.Either<_i7.Failure, List<_i12.Tv>>> execute() =>
      (super.noSuchMethod(
            Invocation.method(#execute, []),
            returnValue:
                _i6.Future<_i3.Either<_i7.Failure, List<_i12.Tv>>>.value(
                  _FakeEither_1<_i7.Failure, List<_i12.Tv>>(
                    this,
                    Invocation.method(#execute, []),
                  ),
                ),
          )
          as _i6.Future<_i3.Either<_i7.Failure, List<_i12.Tv>>>);
}
