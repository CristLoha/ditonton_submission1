// Mocks generated by Mockito 5.4.6 from annotations
// in home/test/presentation/provider/movie_list_notifier_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:ui' as _i7;

import 'package:core/core.dart' as _i4;
import 'package:dartz/dartz.dart' as _i3;
import 'package:home/home.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetNowPlayingMovies_0 extends _i1.SmartFake
    implements _i2.GetNowPlayingMovies {
  _FakeGetNowPlayingMovies_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGetPopularMovies_1 extends _i1.SmartFake
    implements _i2.GetPopularMovies {
  _FakeGetPopularMovies_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGetTopRatedMovies_2 extends _i1.SmartFake
    implements _i2.GetTopRatedMovies {
  _FakeGetTopRatedMovies_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMovieRepository_3 extends _i1.SmartFake
    implements _i2.MovieRepository {
  _FakeMovieRepository_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEither_4<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [MovieListNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieListNotifier extends _i1.Mock implements _i2.MovieListNotifier {
  MockMovieListNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetNowPlayingMovies get getNowPlayingMovies =>
      (super.noSuchMethod(
            Invocation.getter(#getNowPlayingMovies),
            returnValue: _FakeGetNowPlayingMovies_0(
              this,
              Invocation.getter(#getNowPlayingMovies),
            ),
          )
          as _i2.GetNowPlayingMovies);

  @override
  _i2.GetPopularMovies get getPopularMovies =>
      (super.noSuchMethod(
            Invocation.getter(#getPopularMovies),
            returnValue: _FakeGetPopularMovies_1(
              this,
              Invocation.getter(#getPopularMovies),
            ),
          )
          as _i2.GetPopularMovies);

  @override
  _i2.GetTopRatedMovies get getTopRatedMovies =>
      (super.noSuchMethod(
            Invocation.getter(#getTopRatedMovies),
            returnValue: _FakeGetTopRatedMovies_2(
              this,
              Invocation.getter(#getTopRatedMovies),
            ),
          )
          as _i2.GetTopRatedMovies);

  @override
  List<_i2.Movie> get nowPlayingMovies =>
      (super.noSuchMethod(
            Invocation.getter(#nowPlayingMovies),
            returnValue: <_i2.Movie>[],
          )
          as List<_i2.Movie>);

  @override
  _i4.RequestState get nowPlayingState =>
      (super.noSuchMethod(
            Invocation.getter(#nowPlayingState),
            returnValue: _i4.RequestState.empty,
          )
          as _i4.RequestState);

  @override
  List<_i2.Movie> get popularMovies =>
      (super.noSuchMethod(
            Invocation.getter(#popularMovies),
            returnValue: <_i2.Movie>[],
          )
          as List<_i2.Movie>);

  @override
  _i4.RequestState get popularMoviesState =>
      (super.noSuchMethod(
            Invocation.getter(#popularMoviesState),
            returnValue: _i4.RequestState.empty,
          )
          as _i4.RequestState);

  @override
  List<_i2.Movie> get topRatedMovies =>
      (super.noSuchMethod(
            Invocation.getter(#topRatedMovies),
            returnValue: <_i2.Movie>[],
          )
          as List<_i2.Movie>);

  @override
  _i4.RequestState get topRatedMoviesState =>
      (super.noSuchMethod(
            Invocation.getter(#topRatedMoviesState),
            returnValue: _i4.RequestState.empty,
          )
          as _i4.RequestState);

  @override
  String get message =>
      (super.noSuchMethod(
            Invocation.getter(#message),
            returnValue: _i5.dummyValue<String>(
              this,
              Invocation.getter(#message),
            ),
          )
          as String);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i6.Future<void> fetchNowPlayingMovies() =>
      (super.noSuchMethod(
            Invocation.method(#fetchNowPlayingMovies, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> fetchPopularMovies() =>
      (super.noSuchMethod(
            Invocation.method(#fetchPopularMovies, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> fetchTopRatedMovies() =>
      (super.noSuchMethod(
            Invocation.method(#fetchTopRatedMovies, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [GetPopularMovies].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetPopularMovies extends _i1.Mock implements _i2.GetPopularMovies {
  MockGetPopularMovies() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MovieRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeMovieRepository_3(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.MovieRepository);

  @override
  _i6.Future<_i3.Either<_i4.Failure, List<_i2.Movie>>> execute() =>
      (super.noSuchMethod(
            Invocation.method(#execute, []),
            returnValue:
                _i6.Future<_i3.Either<_i4.Failure, List<_i2.Movie>>>.value(
                  _FakeEither_4<_i4.Failure, List<_i2.Movie>>(
                    this,
                    Invocation.method(#execute, []),
                  ),
                ),
          )
          as _i6.Future<_i3.Either<_i4.Failure, List<_i2.Movie>>>);
}

/// A class which mocks [GetTopRatedMovies].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTopRatedMovies extends _i1.Mock implements _i2.GetTopRatedMovies {
  MockGetTopRatedMovies() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MovieRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeMovieRepository_3(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.MovieRepository);

  @override
  _i6.Future<_i3.Either<_i4.Failure, List<_i2.Movie>>> execute() =>
      (super.noSuchMethod(
            Invocation.method(#execute, []),
            returnValue:
                _i6.Future<_i3.Either<_i4.Failure, List<_i2.Movie>>>.value(
                  _FakeEither_4<_i4.Failure, List<_i2.Movie>>(
                    this,
                    Invocation.method(#execute, []),
                  ),
                ),
          )
          as _i6.Future<_i3.Either<_i4.Failure, List<_i2.Movie>>>);
}

/// A class which mocks [GetNowPlayingMovies].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetNowPlayingMovies extends _i1.Mock
    implements _i2.GetNowPlayingMovies {
  MockGetNowPlayingMovies() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MovieRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeMovieRepository_3(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.MovieRepository);

  @override
  _i6.Future<_i3.Either<_i4.Failure, List<_i2.Movie>>> execute() =>
      (super.noSuchMethod(
            Invocation.method(#execute, []),
            returnValue:
                _i6.Future<_i3.Either<_i4.Failure, List<_i2.Movie>>>.value(
                  _FakeEither_4<_i4.Failure, List<_i2.Movie>>(
                    this,
                    Invocation.method(#execute, []),
                  ),
                ),
          )
          as _i6.Future<_i3.Either<_i4.Failure, List<_i2.Movie>>>);
}
