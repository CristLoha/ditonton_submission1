// Mocks generated by Mockito 5.4.6 from annotations
// in home/test/presentation/provider/tv_list_notifier_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:ui' as _i7;

import 'package:core/core.dart' as _i4;
import 'package:dartz/dartz.dart' as _i3;
import 'package:home/home.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetOnTheAirTv_0 extends _i1.SmartFake implements _i2.GetOnTheAirTv {
  _FakeGetOnTheAirTv_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGetPopularTv_1 extends _i1.SmartFake implements _i2.GetPopularTv {
  _FakeGetPopularTv_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGetTopRatedTv_2 extends _i1.SmartFake implements _i2.GetTopRatedTv {
  _FakeGetTopRatedTv_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTvRepository_3 extends _i1.SmartFake implements _i2.TvRepository {
  _FakeTvRepository_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEither_4<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [TvListNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvListNotifier extends _i1.Mock implements _i2.TvListNotifier {
  MockTvListNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetOnTheAirTv get getOnTheAirTv =>
      (super.noSuchMethod(
            Invocation.getter(#getOnTheAirTv),
            returnValue: _FakeGetOnTheAirTv_0(
              this,
              Invocation.getter(#getOnTheAirTv),
            ),
          )
          as _i2.GetOnTheAirTv);

  @override
  _i2.GetPopularTv get getPopularTv =>
      (super.noSuchMethod(
            Invocation.getter(#getPopularTv),
            returnValue: _FakeGetPopularTv_1(
              this,
              Invocation.getter(#getPopularTv),
            ),
          )
          as _i2.GetPopularTv);

  @override
  _i2.GetTopRatedTv get getTopRatedTv =>
      (super.noSuchMethod(
            Invocation.getter(#getTopRatedTv),
            returnValue: _FakeGetTopRatedTv_2(
              this,
              Invocation.getter(#getTopRatedTv),
            ),
          )
          as _i2.GetTopRatedTv);

  @override
  List<_i2.Tv> get onTheAirTv =>
      (super.noSuchMethod(
            Invocation.getter(#onTheAirTv),
            returnValue: <_i2.Tv>[],
          )
          as List<_i2.Tv>);

  @override
  _i4.RequestState get onTheAirTvState =>
      (super.noSuchMethod(
            Invocation.getter(#onTheAirTvState),
            returnValue: _i4.RequestState.empty,
          )
          as _i4.RequestState);

  @override
  List<_i2.Tv> get popularTv =>
      (super.noSuchMethod(
            Invocation.getter(#popularTv),
            returnValue: <_i2.Tv>[],
          )
          as List<_i2.Tv>);

  @override
  _i4.RequestState get popularTvState =>
      (super.noSuchMethod(
            Invocation.getter(#popularTvState),
            returnValue: _i4.RequestState.empty,
          )
          as _i4.RequestState);

  @override
  List<_i2.Tv> get topRatedTv =>
      (super.noSuchMethod(
            Invocation.getter(#topRatedTv),
            returnValue: <_i2.Tv>[],
          )
          as List<_i2.Tv>);

  @override
  _i4.RequestState get topRatedTvState =>
      (super.noSuchMethod(
            Invocation.getter(#topRatedTvState),
            returnValue: _i4.RequestState.empty,
          )
          as _i4.RequestState);

  @override
  String get message =>
      (super.noSuchMethod(
            Invocation.getter(#message),
            returnValue: _i5.dummyValue<String>(
              this,
              Invocation.getter(#message),
            ),
          )
          as String);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i6.Future<void> fetchOnTheAirTv() =>
      (super.noSuchMethod(
            Invocation.method(#fetchOnTheAirTv, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> fetchPopularTv() =>
      (super.noSuchMethod(
            Invocation.method(#fetchPopularTv, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> fetchTopRatedTv() =>
      (super.noSuchMethod(
            Invocation.method(#fetchTopRatedTv, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [GetPopularTv].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetPopularTv extends _i1.Mock implements _i2.GetPopularTv {
  MockGetPopularTv() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TvRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeTvRepository_3(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.TvRepository);

  @override
  _i6.Future<_i3.Either<_i4.Failure, List<_i2.Tv>>> execute() =>
      (super.noSuchMethod(
            Invocation.method(#execute, []),
            returnValue:
                _i6.Future<_i3.Either<_i4.Failure, List<_i2.Tv>>>.value(
                  _FakeEither_4<_i4.Failure, List<_i2.Tv>>(
                    this,
                    Invocation.method(#execute, []),
                  ),
                ),
          )
          as _i6.Future<_i3.Either<_i4.Failure, List<_i2.Tv>>>);
}

/// A class which mocks [GetTopRatedTv].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTopRatedTv extends _i1.Mock implements _i2.GetTopRatedTv {
  MockGetTopRatedTv() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TvRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeTvRepository_3(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.TvRepository);

  @override
  _i6.Future<_i3.Either<_i4.Failure, List<_i2.Tv>>> execute() =>
      (super.noSuchMethod(
            Invocation.method(#execute, []),
            returnValue:
                _i6.Future<_i3.Either<_i4.Failure, List<_i2.Tv>>>.value(
                  _FakeEither_4<_i4.Failure, List<_i2.Tv>>(
                    this,
                    Invocation.method(#execute, []),
                  ),
                ),
          )
          as _i6.Future<_i3.Either<_i4.Failure, List<_i2.Tv>>>);
}

/// A class which mocks [GetOnTheAirTv].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetOnTheAirTv extends _i1.Mock implements _i2.GetOnTheAirTv {
  MockGetOnTheAirTv() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TvRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeTvRepository_3(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.TvRepository);

  @override
  _i6.Future<_i3.Either<_i4.Failure, List<_i2.Tv>>> execute() =>
      (super.noSuchMethod(
            Invocation.method(#execute, []),
            returnValue:
                _i6.Future<_i3.Either<_i4.Failure, List<_i2.Tv>>>.value(
                  _FakeEither_4<_i4.Failure, List<_i2.Tv>>(
                    this,
                    Invocation.method(#execute, []),
                  ),
                ),
          )
          as _i6.Future<_i3.Either<_i4.Failure, List<_i2.Tv>>>);
}
